// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2eproto;
namespace api {
class InitParams;
class InitParamsDefaultTypeInternal;
extern InitParamsDefaultTypeInternal _InitParams_default_instance_;
class ReqAddWordInReview;
class ReqAddWordInReviewDefaultTypeInternal;
extern ReqAddWordInReviewDefaultTypeInternal _ReqAddWordInReview_default_instance_;
class ReqDeleteProfile;
class ReqDeleteProfileDefaultTypeInternal;
extern ReqDeleteProfileDefaultTypeInternal _ReqDeleteProfile_default_instance_;
class ReqRandWords;
class ReqRandWordsDefaultTypeInternal;
extern ReqRandWordsDefaultTypeInternal _ReqRandWords_default_instance_;
class ReqRecentWords;
class ReqRecentWordsDefaultTypeInternal;
extern ReqRecentWordsDefaultTypeInternal _ReqRecentWords_default_instance_;
class ReqRemoveWordFromCurrent;
class ReqRemoveWordFromCurrentDefaultTypeInternal;
extern ReqRemoveWordFromCurrentDefaultTypeInternal _ReqRemoveWordFromCurrent_default_instance_;
class ReqReviewForToday;
class ReqReviewForTodayDefaultTypeInternal;
extern ReqReviewForTodayDefaultTypeInternal _ReqReviewForToday_default_instance_;
class ReqSearchInReviewList;
class ReqSearchInReviewListDefaultTypeInternal;
extern ReqSearchInReviewListDefaultTypeInternal _ReqSearchInReviewList_default_instance_;
class ReqSearchWords;
class ReqSearchWordsDefaultTypeInternal;
extern ReqSearchWordsDefaultTypeInternal _ReqSearchWords_default_instance_;
class ReqSentences;
class ReqSentencesDefaultTypeInternal;
extern ReqSentencesDefaultTypeInternal _ReqSentences_default_instance_;
class ReqUpdateWordInCurrent;
class ReqUpdateWordInCurrentDefaultTypeInternal;
extern ReqUpdateWordInCurrentDefaultTypeInternal _ReqUpdateWordInCurrent_default_instance_;
class ReqWordInReview;
class ReqWordInReviewDefaultTypeInternal;
extern ReqWordInReviewDefaultTypeInternal _ReqWordInReview_default_instance_;
class RespAddWordInCurrent;
class RespAddWordInCurrentDefaultTypeInternal;
extern RespAddWordInCurrentDefaultTypeInternal _RespAddWordInCurrent_default_instance_;
class RespDefault;
class RespDefaultDefaultTypeInternal;
extern RespDefaultDefaultTypeInternal _RespDefault_default_instance_;
class RespDeleteProfile;
class RespDeleteProfileDefaultTypeInternal;
extern RespDeleteProfileDefaultTypeInternal _RespDeleteProfile_default_instance_;
class RespRandWords;
class RespRandWordsDefaultTypeInternal;
extern RespRandWordsDefaultTypeInternal _RespRandWords_default_instance_;
class RespRecentWords;
class RespRecentWordsDefaultTypeInternal;
extern RespRecentWordsDefaultTypeInternal _RespRecentWords_default_instance_;
class RespRemoveWordFromCurrent;
class RespRemoveWordFromCurrentDefaultTypeInternal;
extern RespRemoveWordFromCurrentDefaultTypeInternal _RespRemoveWordFromCurrent_default_instance_;
class RespReviewForToday;
class RespReviewForTodayDefaultTypeInternal;
extern RespReviewForTodayDefaultTypeInternal _RespReviewForToday_default_instance_;
class RespSearchInReviewList;
class RespSearchInReviewListDefaultTypeInternal;
extern RespSearchInReviewListDefaultTypeInternal _RespSearchInReviewList_default_instance_;
class RespSearchWords;
class RespSearchWordsDefaultTypeInternal;
extern RespSearchWordsDefaultTypeInternal _RespSearchWords_default_instance_;
class RespSentences;
class RespSentencesDefaultTypeInternal;
extern RespSentencesDefaultTypeInternal _RespSentences_default_instance_;
class RespUpdateWordInCurrent;
class RespUpdateWordInCurrentDefaultTypeInternal;
extern RespUpdateWordInCurrentDefaultTypeInternal _RespUpdateWordInCurrent_default_instance_;
class Word;
class WordDefaultTypeInternal;
extern WordDefaultTypeInternal _Word_default_instance_;
class WordInReview;
class WordInReviewDefaultTypeInternal;
extern WordInReviewDefaultTypeInternal _WordInReview_default_instance_;
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> ::api::InitParams* Arena::CreateMaybeMessage<::api::InitParams>(Arena*);
template<> ::api::ReqAddWordInReview* Arena::CreateMaybeMessage<::api::ReqAddWordInReview>(Arena*);
template<> ::api::ReqDeleteProfile* Arena::CreateMaybeMessage<::api::ReqDeleteProfile>(Arena*);
template<> ::api::ReqRandWords* Arena::CreateMaybeMessage<::api::ReqRandWords>(Arena*);
template<> ::api::ReqRecentWords* Arena::CreateMaybeMessage<::api::ReqRecentWords>(Arena*);
template<> ::api::ReqRemoveWordFromCurrent* Arena::CreateMaybeMessage<::api::ReqRemoveWordFromCurrent>(Arena*);
template<> ::api::ReqReviewForToday* Arena::CreateMaybeMessage<::api::ReqReviewForToday>(Arena*);
template<> ::api::ReqSearchInReviewList* Arena::CreateMaybeMessage<::api::ReqSearchInReviewList>(Arena*);
template<> ::api::ReqSearchWords* Arena::CreateMaybeMessage<::api::ReqSearchWords>(Arena*);
template<> ::api::ReqSentences* Arena::CreateMaybeMessage<::api::ReqSentences>(Arena*);
template<> ::api::ReqUpdateWordInCurrent* Arena::CreateMaybeMessage<::api::ReqUpdateWordInCurrent>(Arena*);
template<> ::api::ReqWordInReview* Arena::CreateMaybeMessage<::api::ReqWordInReview>(Arena*);
template<> ::api::RespAddWordInCurrent* Arena::CreateMaybeMessage<::api::RespAddWordInCurrent>(Arena*);
template<> ::api::RespDefault* Arena::CreateMaybeMessage<::api::RespDefault>(Arena*);
template<> ::api::RespDeleteProfile* Arena::CreateMaybeMessage<::api::RespDeleteProfile>(Arena*);
template<> ::api::RespRandWords* Arena::CreateMaybeMessage<::api::RespRandWords>(Arena*);
template<> ::api::RespRecentWords* Arena::CreateMaybeMessage<::api::RespRecentWords>(Arena*);
template<> ::api::RespRemoveWordFromCurrent* Arena::CreateMaybeMessage<::api::RespRemoveWordFromCurrent>(Arena*);
template<> ::api::RespReviewForToday* Arena::CreateMaybeMessage<::api::RespReviewForToday>(Arena*);
template<> ::api::RespSearchInReviewList* Arena::CreateMaybeMessage<::api::RespSearchInReviewList>(Arena*);
template<> ::api::RespSearchWords* Arena::CreateMaybeMessage<::api::RespSearchWords>(Arena*);
template<> ::api::RespSentences* Arena::CreateMaybeMessage<::api::RespSentences>(Arena*);
template<> ::api::RespUpdateWordInCurrent* Arena::CreateMaybeMessage<::api::RespUpdateWordInCurrent>(Arena*);
template<> ::api::Word* Arena::CreateMaybeMessage<::api::Word>(Arena*);
template<> ::api::WordInReview* Arena::CreateMaybeMessage<::api::WordInReview>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api {

// ===================================================================

class InitParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.InitParams) */ {
 public:
  inline InitParams() : InitParams(nullptr) {}
  virtual ~InitParams();

  InitParams(const InitParams& from);
  InitParams(InitParams&& from) noexcept
    : InitParams() {
    *this = ::std::move(from);
  }

  inline InitParams& operator=(const InitParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitParams& operator=(InitParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitParams* internal_default_instance() {
    return reinterpret_cast<const InitParams*>(
               &_InitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitParams& a, InitParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InitParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitParams* New() const final {
    return CreateMaybeMessage<InitParams>(nullptr);
  }

  InitParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitParams& from);
  void MergeFrom(const InitParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.InitParams";
  }
  protected:
  explicit InitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalDirFieldNumber = 1,
  };
  // optional string local_dir = 1;
  bool has_local_dir() const;
  private:
  bool _internal_has_local_dir() const;
  public:
  void clear_local_dir();
  const std::string& local_dir() const;
  void set_local_dir(const std::string& value);
  void set_local_dir(std::string&& value);
  void set_local_dir(const char* value);
  void set_local_dir(const char* value, size_t size);
  std::string* mutable_local_dir();
  std::string* release_local_dir();
  void set_allocated_local_dir(std::string* local_dir);
  private:
  const std::string& _internal_local_dir() const;
  void _internal_set_local_dir(const std::string& value);
  std::string* _internal_mutable_local_dir();
  public:

  // @@protoc_insertion_point(class_scope:api.InitParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_dir_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqRecentWords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqRecentWords) */ {
 public:
  inline ReqRecentWords() : ReqRecentWords(nullptr) {}
  virtual ~ReqRecentWords();

  ReqRecentWords(const ReqRecentWords& from);
  ReqRecentWords(ReqRecentWords&& from) noexcept
    : ReqRecentWords() {
    *this = ::std::move(from);
  }

  inline ReqRecentWords& operator=(const ReqRecentWords& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRecentWords& operator=(ReqRecentWords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqRecentWords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRecentWords* internal_default_instance() {
    return reinterpret_cast<const ReqRecentWords*>(
               &_ReqRecentWords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqRecentWords& a, ReqRecentWords& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRecentWords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRecentWords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRecentWords* New() const final {
    return CreateMaybeMessage<ReqRecentWords>(nullptr);
  }

  ReqRecentWords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRecentWords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRecentWords& from);
  void MergeFrom(const ReqRecentWords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRecentWords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqRecentWords";
  }
  protected:
  explicit ReqRecentWords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // optional string desc = 1;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:api.ReqRecentWords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespRecentWords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespRecentWords) */ {
 public:
  inline RespRecentWords() : RespRecentWords(nullptr) {}
  virtual ~RespRecentWords();

  RespRecentWords(const RespRecentWords& from);
  RespRecentWords(RespRecentWords&& from) noexcept
    : RespRecentWords() {
    *this = ::std::move(from);
  }

  inline RespRecentWords& operator=(const RespRecentWords& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespRecentWords& operator=(RespRecentWords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespRecentWords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespRecentWords* internal_default_instance() {
    return reinterpret_cast<const RespRecentWords*>(
               &_RespRecentWords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RespRecentWords& a, RespRecentWords& b) {
    a.Swap(&b);
  }
  inline void Swap(RespRecentWords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespRecentWords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespRecentWords* New() const final {
    return CreateMaybeMessage<RespRecentWords>(nullptr);
  }

  RespRecentWords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespRecentWords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespRecentWords& from);
  void MergeFrom(const RespRecentWords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespRecentWords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespRecentWords";
  }
  protected:
  explicit RespRecentWords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
  };
  // repeated string word = 1;
  int word_size() const;
  private:
  int _internal_word_size() const;
  public:
  void clear_word();
  const std::string& word(int index) const;
  std::string* mutable_word(int index);
  void set_word(int index, const std::string& value);
  void set_word(int index, std::string&& value);
  void set_word(int index, const char* value);
  void set_word(int index, const char* value, size_t size);
  std::string* add_word();
  void add_word(const std::string& value);
  void add_word(std::string&& value);
  void add_word(const char* value);
  void add_word(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& word() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_word();
  private:
  const std::string& _internal_word(int index) const;
  std::string* _internal_add_word();
  public:

  // @@protoc_insertion_point(class_scope:api.RespRecentWords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> word_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqSearchWords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqSearchWords) */ {
 public:
  inline ReqSearchWords() : ReqSearchWords(nullptr) {}
  virtual ~ReqSearchWords();

  ReqSearchWords(const ReqSearchWords& from);
  ReqSearchWords(ReqSearchWords&& from) noexcept
    : ReqSearchWords() {
    *this = ::std::move(from);
  }

  inline ReqSearchWords& operator=(const ReqSearchWords& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSearchWords& operator=(ReqSearchWords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSearchWords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSearchWords* internal_default_instance() {
    return reinterpret_cast<const ReqSearchWords*>(
               &_ReqSearchWords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqSearchWords& a, ReqSearchWords& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSearchWords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSearchWords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSearchWords* New() const final {
    return CreateMaybeMessage<ReqSearchWords>(nullptr);
  }

  ReqSearchWords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSearchWords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSearchWords& from);
  void MergeFrom(const ReqSearchWords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSearchWords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqSearchWords";
  }
  protected:
  explicit ReqSearchWords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kUseLikeFieldNumber = 2,
  };
  // optional string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // optional bool use_like = 2;
  bool has_use_like() const;
  private:
  bool _internal_has_use_like() const;
  public:
  void clear_use_like();
  bool use_like() const;
  void set_use_like(bool value);
  private:
  bool _internal_use_like() const;
  void _internal_set_use_like(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.ReqSearchWords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  bool use_like_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespSearchWords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespSearchWords) */ {
 public:
  inline RespSearchWords() : RespSearchWords(nullptr) {}
  virtual ~RespSearchWords();

  RespSearchWords(const RespSearchWords& from);
  RespSearchWords(RespSearchWords&& from) noexcept
    : RespSearchWords() {
    *this = ::std::move(from);
  }

  inline RespSearchWords& operator=(const RespSearchWords& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespSearchWords& operator=(RespSearchWords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespSearchWords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespSearchWords* internal_default_instance() {
    return reinterpret_cast<const RespSearchWords*>(
               &_RespSearchWords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RespSearchWords& a, RespSearchWords& b) {
    a.Swap(&b);
  }
  inline void Swap(RespSearchWords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespSearchWords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespSearchWords* New() const final {
    return CreateMaybeMessage<RespSearchWords>(nullptr);
  }

  RespSearchWords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespSearchWords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespSearchWords& from);
  void MergeFrom(const RespSearchWords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespSearchWords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespSearchWords";
  }
  protected:
  explicit RespSearchWords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .api.Word item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::api::Word* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word >*
      mutable_item();
  private:
  const ::api::Word& _internal_item(int index) const;
  ::api::Word* _internal_add_item();
  public:
  const ::api::Word& item(int index) const;
  ::api::Word* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word >&
      item() const;

  // @@protoc_insertion_point(class_scope:api.RespSearchWords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word > item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqRandWords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqRandWords) */ {
 public:
  inline ReqRandWords() : ReqRandWords(nullptr) {}
  virtual ~ReqRandWords();

  ReqRandWords(const ReqRandWords& from);
  ReqRandWords(ReqRandWords&& from) noexcept
    : ReqRandWords() {
    *this = ::std::move(from);
  }

  inline ReqRandWords& operator=(const ReqRandWords& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRandWords& operator=(ReqRandWords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqRandWords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRandWords* internal_default_instance() {
    return reinterpret_cast<const ReqRandWords*>(
               &_ReqRandWords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReqRandWords& a, ReqRandWords& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRandWords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRandWords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRandWords* New() const final {
    return CreateMaybeMessage<ReqRandWords>(nullptr);
  }

  ReqRandWords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRandWords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRandWords& from);
  void MergeFrom(const ReqRandWords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRandWords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqRandWords";
  }
  protected:
  explicit ReqRandWords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // optional uint32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ReqRandWords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespRandWords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespRandWords) */ {
 public:
  inline RespRandWords() : RespRandWords(nullptr) {}
  virtual ~RespRandWords();

  RespRandWords(const RespRandWords& from);
  RespRandWords(RespRandWords&& from) noexcept
    : RespRandWords() {
    *this = ::std::move(from);
  }

  inline RespRandWords& operator=(const RespRandWords& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespRandWords& operator=(RespRandWords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespRandWords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespRandWords* internal_default_instance() {
    return reinterpret_cast<const RespRandWords*>(
               &_RespRandWords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RespRandWords& a, RespRandWords& b) {
    a.Swap(&b);
  }
  inline void Swap(RespRandWords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespRandWords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespRandWords* New() const final {
    return CreateMaybeMessage<RespRandWords>(nullptr);
  }

  RespRandWords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespRandWords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespRandWords& from);
  void MergeFrom(const RespRandWords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespRandWords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespRandWords";
  }
  protected:
  explicit RespRandWords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 1,
  };
  // repeated .api.Word words = 1;
  int words_size() const;
  private:
  int _internal_words_size() const;
  public:
  void clear_words();
  ::api::Word* mutable_words(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word >*
      mutable_words();
  private:
  const ::api::Word& _internal_words(int index) const;
  ::api::Word* _internal_add_words();
  public:
  const ::api::Word& words(int index) const;
  ::api::Word* add_words();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word >&
      words() const;

  // @@protoc_insertion_point(class_scope:api.RespRandWords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word > words_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqWordInReview PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqWordInReview) */ {
 public:
  inline ReqWordInReview() : ReqWordInReview(nullptr) {}
  virtual ~ReqWordInReview();

  ReqWordInReview(const ReqWordInReview& from);
  ReqWordInReview(ReqWordInReview&& from) noexcept
    : ReqWordInReview() {
    *this = ::std::move(from);
  }

  inline ReqWordInReview& operator=(const ReqWordInReview& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqWordInReview& operator=(ReqWordInReview&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqWordInReview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqWordInReview* internal_default_instance() {
    return reinterpret_cast<const ReqWordInReview*>(
               &_ReqWordInReview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReqWordInReview& a, ReqWordInReview& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqWordInReview* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqWordInReview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqWordInReview* New() const final {
    return CreateMaybeMessage<ReqWordInReview>(nullptr);
  }

  ReqWordInReview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqWordInReview>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqWordInReview& from);
  void MergeFrom(const ReqWordInReview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqWordInReview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqWordInReview";
  }
  protected:
  explicit ReqWordInReview(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
  };
  // optional string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // @@protoc_insertion_point(class_scope:api.ReqWordInReview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class WordInReview PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.WordInReview) */ {
 public:
  inline WordInReview() : WordInReview(nullptr) {}
  virtual ~WordInReview();

  WordInReview(const WordInReview& from);
  WordInReview(WordInReview&& from) noexcept
    : WordInReview() {
    *this = ::std::move(from);
  }

  inline WordInReview& operator=(const WordInReview& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordInReview& operator=(WordInReview&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WordInReview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WordInReview* internal_default_instance() {
    return reinterpret_cast<const WordInReview*>(
               &_WordInReview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WordInReview& a, WordInReview& b) {
    a.Swap(&b);
  }
  inline void Swap(WordInReview* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WordInReview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WordInReview* New() const final {
    return CreateMaybeMessage<WordInReview>(nullptr);
  }

  WordInReview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WordInReview>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WordInReview& from);
  void MergeFrom(const WordInReview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WordInReview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.WordInReview";
  }
  protected:
  explicit WordInReview(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kSuccessCountFieldNumber = 2,
    kFailCountFieldNumber = 3,
    kLastTmSuccessFieldNumber = 4,
    kLastTmFailFieldNumber = 5,
    kNextReviewTmMsFieldNumber = 6,
  };
  // optional string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // optional uint32 success_count = 2;
  bool has_success_count() const;
  private:
  bool _internal_has_success_count() const;
  public:
  void clear_success_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 success_count() const;
  void set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_success_count() const;
  void _internal_set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fail_count = 3;
  bool has_fail_count() const;
  private:
  bool _internal_has_fail_count() const;
  public:
  void clear_fail_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 fail_count() const;
  void set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fail_count() const;
  void _internal_set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 last_tm_success = 4;
  bool has_last_tm_success() const;
  private:
  bool _internal_has_last_tm_success() const;
  public:
  void clear_last_tm_success();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_success() const;
  void set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_tm_success() const;
  void _internal_set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 last_tm_fail = 5;
  bool has_last_tm_fail() const;
  private:
  bool _internal_has_last_tm_fail() const;
  public:
  void clear_last_tm_fail();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_fail() const;
  void set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_tm_fail() const;
  void _internal_set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 next_review_tm_ms = 6;
  bool has_next_review_tm_ms() const;
  private:
  bool _internal_has_next_review_tm_ms() const;
  public:
  void clear_next_review_tm_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_review_tm_ms() const;
  void set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_review_tm_ms() const;
  void _internal_set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.WordInReview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  ::PROTOBUF_NAMESPACE_ID::uint32 success_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fail_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_success_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_fail_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_review_tm_ms_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqAddWordInReview PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqAddWordInReview) */ {
 public:
  inline ReqAddWordInReview() : ReqAddWordInReview(nullptr) {}
  virtual ~ReqAddWordInReview();

  ReqAddWordInReview(const ReqAddWordInReview& from);
  ReqAddWordInReview(ReqAddWordInReview&& from) noexcept
    : ReqAddWordInReview() {
    *this = ::std::move(from);
  }

  inline ReqAddWordInReview& operator=(const ReqAddWordInReview& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAddWordInReview& operator=(ReqAddWordInReview&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAddWordInReview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAddWordInReview* internal_default_instance() {
    return reinterpret_cast<const ReqAddWordInReview*>(
               &_ReqAddWordInReview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReqAddWordInReview& a, ReqAddWordInReview& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAddWordInReview* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAddWordInReview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAddWordInReview* New() const final {
    return CreateMaybeMessage<ReqAddWordInReview>(nullptr);
  }

  ReqAddWordInReview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAddWordInReview>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAddWordInReview& from);
  void MergeFrom(const ReqAddWordInReview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAddWordInReview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqAddWordInReview";
  }
  protected:
  explicit ReqAddWordInReview(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kUseExtraFieldsFieldNumber = 2,
    kSuccessCountFieldNumber = 3,
    kLastTmSuccessFieldNumber = 5,
    kLastTmFailFieldNumber = 6,
    kNextReviewTmMsFieldNumber = 7,
    kFailCountFieldNumber = 4,
  };
  // optional string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // optional bool use_extra_fields = 2;
  bool has_use_extra_fields() const;
  private:
  bool _internal_has_use_extra_fields() const;
  public:
  void clear_use_extra_fields();
  bool use_extra_fields() const;
  void set_use_extra_fields(bool value);
  private:
  bool _internal_use_extra_fields() const;
  void _internal_set_use_extra_fields(bool value);
  public:

  // optional uint32 success_count = 3;
  bool has_success_count() const;
  private:
  bool _internal_has_success_count() const;
  public:
  void clear_success_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 success_count() const;
  void set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_success_count() const;
  void _internal_set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 last_tm_success = 5;
  bool has_last_tm_success() const;
  private:
  bool _internal_has_last_tm_success() const;
  public:
  void clear_last_tm_success();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_success() const;
  void set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_tm_success() const;
  void _internal_set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 last_tm_fail = 6;
  bool has_last_tm_fail() const;
  private:
  bool _internal_has_last_tm_fail() const;
  public:
  void clear_last_tm_fail();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_fail() const;
  void set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_tm_fail() const;
  void _internal_set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 next_review_tm_ms = 7;
  bool has_next_review_tm_ms() const;
  private:
  bool _internal_has_next_review_tm_ms() const;
  public:
  void clear_next_review_tm_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_review_tm_ms() const;
  void set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_review_tm_ms() const;
  void _internal_set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 fail_count = 4;
  bool has_fail_count() const;
  private:
  bool _internal_has_fail_count() const;
  public:
  void clear_fail_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 fail_count() const;
  void set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fail_count() const;
  void _internal_set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ReqAddWordInReview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  bool use_extra_fields_;
  ::PROTOBUF_NAMESPACE_ID::uint32 success_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_success_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_fail_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_review_tm_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fail_count_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespAddWordInCurrent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespAddWordInCurrent) */ {
 public:
  inline RespAddWordInCurrent() : RespAddWordInCurrent(nullptr) {}
  virtual ~RespAddWordInCurrent();

  RespAddWordInCurrent(const RespAddWordInCurrent& from);
  RespAddWordInCurrent(RespAddWordInCurrent&& from) noexcept
    : RespAddWordInCurrent() {
    *this = ::std::move(from);
  }

  inline RespAddWordInCurrent& operator=(const RespAddWordInCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespAddWordInCurrent& operator=(RespAddWordInCurrent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespAddWordInCurrent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespAddWordInCurrent* internal_default_instance() {
    return reinterpret_cast<const RespAddWordInCurrent*>(
               &_RespAddWordInCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RespAddWordInCurrent& a, RespAddWordInCurrent& b) {
    a.Swap(&b);
  }
  inline void Swap(RespAddWordInCurrent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespAddWordInCurrent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespAddWordInCurrent* New() const final {
    return CreateMaybeMessage<RespAddWordInCurrent>(nullptr);
  }

  RespAddWordInCurrent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespAddWordInCurrent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespAddWordInCurrent& from);
  void MergeFrom(const RespAddWordInCurrent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespAddWordInCurrent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespAddWordInCurrent";
  }
  protected:
  explicit RespAddWordInCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.RespAddWordInCurrent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqRemoveWordFromCurrent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqRemoveWordFromCurrent) */ {
 public:
  inline ReqRemoveWordFromCurrent() : ReqRemoveWordFromCurrent(nullptr) {}
  virtual ~ReqRemoveWordFromCurrent();

  ReqRemoveWordFromCurrent(const ReqRemoveWordFromCurrent& from);
  ReqRemoveWordFromCurrent(ReqRemoveWordFromCurrent&& from) noexcept
    : ReqRemoveWordFromCurrent() {
    *this = ::std::move(from);
  }

  inline ReqRemoveWordFromCurrent& operator=(const ReqRemoveWordFromCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRemoveWordFromCurrent& operator=(ReqRemoveWordFromCurrent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqRemoveWordFromCurrent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRemoveWordFromCurrent* internal_default_instance() {
    return reinterpret_cast<const ReqRemoveWordFromCurrent*>(
               &_ReqRemoveWordFromCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReqRemoveWordFromCurrent& a, ReqRemoveWordFromCurrent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRemoveWordFromCurrent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRemoveWordFromCurrent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRemoveWordFromCurrent* New() const final {
    return CreateMaybeMessage<ReqRemoveWordFromCurrent>(nullptr);
  }

  ReqRemoveWordFromCurrent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRemoveWordFromCurrent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRemoveWordFromCurrent& from);
  void MergeFrom(const ReqRemoveWordFromCurrent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRemoveWordFromCurrent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqRemoveWordFromCurrent";
  }
  protected:
  explicit ReqRemoveWordFromCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
  };
  // optional string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // @@protoc_insertion_point(class_scope:api.ReqRemoveWordFromCurrent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespRemoveWordFromCurrent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespRemoveWordFromCurrent) */ {
 public:
  inline RespRemoveWordFromCurrent() : RespRemoveWordFromCurrent(nullptr) {}
  virtual ~RespRemoveWordFromCurrent();

  RespRemoveWordFromCurrent(const RespRemoveWordFromCurrent& from);
  RespRemoveWordFromCurrent(RespRemoveWordFromCurrent&& from) noexcept
    : RespRemoveWordFromCurrent() {
    *this = ::std::move(from);
  }

  inline RespRemoveWordFromCurrent& operator=(const RespRemoveWordFromCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespRemoveWordFromCurrent& operator=(RespRemoveWordFromCurrent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespRemoveWordFromCurrent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespRemoveWordFromCurrent* internal_default_instance() {
    return reinterpret_cast<const RespRemoveWordFromCurrent*>(
               &_RespRemoveWordFromCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RespRemoveWordFromCurrent& a, RespRemoveWordFromCurrent& b) {
    a.Swap(&b);
  }
  inline void Swap(RespRemoveWordFromCurrent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespRemoveWordFromCurrent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespRemoveWordFromCurrent* New() const final {
    return CreateMaybeMessage<RespRemoveWordFromCurrent>(nullptr);
  }

  RespRemoveWordFromCurrent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespRemoveWordFromCurrent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespRemoveWordFromCurrent& from);
  void MergeFrom(const RespRemoveWordFromCurrent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespRemoveWordFromCurrent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespRemoveWordFromCurrent";
  }
  protected:
  explicit RespRemoveWordFromCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.RespRemoveWordFromCurrent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdateWordInCurrent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqUpdateWordInCurrent) */ {
 public:
  inline ReqUpdateWordInCurrent() : ReqUpdateWordInCurrent(nullptr) {}
  virtual ~ReqUpdateWordInCurrent();

  ReqUpdateWordInCurrent(const ReqUpdateWordInCurrent& from);
  ReqUpdateWordInCurrent(ReqUpdateWordInCurrent&& from) noexcept
    : ReqUpdateWordInCurrent() {
    *this = ::std::move(from);
  }

  inline ReqUpdateWordInCurrent& operator=(const ReqUpdateWordInCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdateWordInCurrent& operator=(ReqUpdateWordInCurrent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqUpdateWordInCurrent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqUpdateWordInCurrent* internal_default_instance() {
    return reinterpret_cast<const ReqUpdateWordInCurrent*>(
               &_ReqUpdateWordInCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReqUpdateWordInCurrent& a, ReqUpdateWordInCurrent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdateWordInCurrent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdateWordInCurrent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdateWordInCurrent* New() const final {
    return CreateMaybeMessage<ReqUpdateWordInCurrent>(nullptr);
  }

  ReqUpdateWordInCurrent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdateWordInCurrent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdateWordInCurrent& from);
  void MergeFrom(const ReqUpdateWordInCurrent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdateWordInCurrent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqUpdateWordInCurrent";
  }
  protected:
  explicit ReqUpdateWordInCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kSuccessCountFieldNumber = 2,
    kFailCountFieldNumber = 3,
    kLastTmSuccessFieldNumber = 4,
    kLastTmFailFieldNumber = 5,
    kNextReviewTmMsFieldNumber = 6,
  };
  // optional string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // optional uint32 success_count = 2;
  bool has_success_count() const;
  private:
  bool _internal_has_success_count() const;
  public:
  void clear_success_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 success_count() const;
  void set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_success_count() const;
  void _internal_set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fail_count = 3;
  bool has_fail_count() const;
  private:
  bool _internal_has_fail_count() const;
  public:
  void clear_fail_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 fail_count() const;
  void set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fail_count() const;
  void _internal_set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 last_tm_success = 4;
  bool has_last_tm_success() const;
  private:
  bool _internal_has_last_tm_success() const;
  public:
  void clear_last_tm_success();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_success() const;
  void set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_tm_success() const;
  void _internal_set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 last_tm_fail = 5;
  bool has_last_tm_fail() const;
  private:
  bool _internal_has_last_tm_fail() const;
  public:
  void clear_last_tm_fail();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_fail() const;
  void set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_tm_fail() const;
  void _internal_set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 next_review_tm_ms = 6;
  bool has_next_review_tm_ms() const;
  private:
  bool _internal_has_next_review_tm_ms() const;
  public:
  void clear_next_review_tm_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_review_tm_ms() const;
  void set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_review_tm_ms() const;
  void _internal_set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ReqUpdateWordInCurrent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  ::PROTOBUF_NAMESPACE_ID::uint32 success_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fail_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_success_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tm_fail_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_review_tm_ms_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespUpdateWordInCurrent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespUpdateWordInCurrent) */ {
 public:
  inline RespUpdateWordInCurrent() : RespUpdateWordInCurrent(nullptr) {}
  virtual ~RespUpdateWordInCurrent();

  RespUpdateWordInCurrent(const RespUpdateWordInCurrent& from);
  RespUpdateWordInCurrent(RespUpdateWordInCurrent&& from) noexcept
    : RespUpdateWordInCurrent() {
    *this = ::std::move(from);
  }

  inline RespUpdateWordInCurrent& operator=(const RespUpdateWordInCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespUpdateWordInCurrent& operator=(RespUpdateWordInCurrent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespUpdateWordInCurrent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespUpdateWordInCurrent* internal_default_instance() {
    return reinterpret_cast<const RespUpdateWordInCurrent*>(
               &_RespUpdateWordInCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RespUpdateWordInCurrent& a, RespUpdateWordInCurrent& b) {
    a.Swap(&b);
  }
  inline void Swap(RespUpdateWordInCurrent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespUpdateWordInCurrent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespUpdateWordInCurrent* New() const final {
    return CreateMaybeMessage<RespUpdateWordInCurrent>(nullptr);
  }

  RespUpdateWordInCurrent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespUpdateWordInCurrent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespUpdateWordInCurrent& from);
  void MergeFrom(const RespUpdateWordInCurrent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespUpdateWordInCurrent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespUpdateWordInCurrent";
  }
  protected:
  explicit RespUpdateWordInCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.RespUpdateWordInCurrent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class Word PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.Word) */ {
 public:
  inline Word() : Word(nullptr) {}
  virtual ~Word();

  Word(const Word& from);
  Word(Word&& from) noexcept
    : Word() {
    *this = ::std::move(from);
  }

  inline Word& operator=(const Word& from) {
    CopyFrom(from);
    return *this;
  }
  inline Word& operator=(Word&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Word& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Word* internal_default_instance() {
    return reinterpret_cast<const Word*>(
               &_Word_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Word& a, Word& b) {
    a.Swap(&b);
  }
  inline void Swap(Word* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Word* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Word* New() const final {
    return CreateMaybeMessage<Word>(nullptr);
  }

  Word* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Word>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Word& from);
  void MergeFrom(const Word& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Word* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.Word";
  }
  protected:
  explicit Word(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kJsonFieldNumber = 3,
    kTranscriptFieldNumber = 4,
    kFrequencyFieldNumber = 2,
  };
  // optional string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional string json = 3;
  bool has_json() const;
  private:
  bool _internal_has_json() const;
  public:
  void clear_json();
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // optional string transcript = 4;
  bool has_transcript() const;
  private:
  bool _internal_has_transcript() const;
  public:
  void clear_transcript();
  const std::string& transcript() const;
  void set_transcript(const std::string& value);
  void set_transcript(std::string&& value);
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  std::string* mutable_transcript();
  std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // optional uint64 frequency = 2;
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint64 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.Word)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frequency_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqReviewForToday PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqReviewForToday) */ {
 public:
  inline ReqReviewForToday() : ReqReviewForToday(nullptr) {}
  virtual ~ReqReviewForToday();

  ReqReviewForToday(const ReqReviewForToday& from);
  ReqReviewForToday(ReqReviewForToday&& from) noexcept
    : ReqReviewForToday() {
    *this = ::std::move(from);
  }

  inline ReqReviewForToday& operator=(const ReqReviewForToday& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqReviewForToday& operator=(ReqReviewForToday&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqReviewForToday& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqReviewForToday* internal_default_instance() {
    return reinterpret_cast<const ReqReviewForToday*>(
               &_ReqReviewForToday_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReqReviewForToday& a, ReqReviewForToday& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqReviewForToday* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqReviewForToday* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqReviewForToday* New() const final {
    return CreateMaybeMessage<ReqReviewForToday>(nullptr);
  }

  ReqReviewForToday* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqReviewForToday>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqReviewForToday& from);
  void MergeFrom(const ReqReviewForToday& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqReviewForToday* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqReviewForToday";
  }
  protected:
  explicit ReqReviewForToday(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.ReqReviewForToday)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespReviewForToday PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespReviewForToday) */ {
 public:
  inline RespReviewForToday() : RespReviewForToday(nullptr) {}
  virtual ~RespReviewForToday();

  RespReviewForToday(const RespReviewForToday& from);
  RespReviewForToday(RespReviewForToday&& from) noexcept
    : RespReviewForToday() {
    *this = ::std::move(from);
  }

  inline RespReviewForToday& operator=(const RespReviewForToday& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespReviewForToday& operator=(RespReviewForToday&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespReviewForToday& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespReviewForToday* internal_default_instance() {
    return reinterpret_cast<const RespReviewForToday*>(
               &_RespReviewForToday_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RespReviewForToday& a, RespReviewForToday& b) {
    a.Swap(&b);
  }
  inline void Swap(RespReviewForToday* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespReviewForToday* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespReviewForToday* New() const final {
    return CreateMaybeMessage<RespReviewForToday>(nullptr);
  }

  RespReviewForToday* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespReviewForToday>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespReviewForToday& from);
  void MergeFrom(const RespReviewForToday& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespReviewForToday* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespReviewForToday";
  }
  protected:
  explicit RespReviewForToday(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNWordFieldNumber = 1,
    kCountAllFieldNumber = 2,
  };
  // repeated .api.WordInReview first_n_word = 1;
  int first_n_word_size() const;
  private:
  int _internal_first_n_word_size() const;
  public:
  void clear_first_n_word();
  ::api::WordInReview* mutable_first_n_word(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview >*
      mutable_first_n_word();
  private:
  const ::api::WordInReview& _internal_first_n_word(int index) const;
  ::api::WordInReview* _internal_add_first_n_word();
  public:
  const ::api::WordInReview& first_n_word(int index) const;
  ::api::WordInReview* add_first_n_word();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview >&
      first_n_word() const;

  // optional uint32 count_all = 2;
  bool has_count_all() const;
  private:
  bool _internal_has_count_all() const;
  public:
  void clear_count_all();
  ::PROTOBUF_NAMESPACE_ID::uint32 count_all() const;
  void set_count_all(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count_all() const;
  void _internal_set_count_all(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.RespReviewForToday)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview > first_n_word_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_all_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqSearchInReviewList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqSearchInReviewList) */ {
 public:
  inline ReqSearchInReviewList() : ReqSearchInReviewList(nullptr) {}
  virtual ~ReqSearchInReviewList();

  ReqSearchInReviewList(const ReqSearchInReviewList& from);
  ReqSearchInReviewList(ReqSearchInReviewList&& from) noexcept
    : ReqSearchInReviewList() {
    *this = ::std::move(from);
  }

  inline ReqSearchInReviewList& operator=(const ReqSearchInReviewList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSearchInReviewList& operator=(ReqSearchInReviewList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSearchInReviewList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSearchInReviewList* internal_default_instance() {
    return reinterpret_cast<const ReqSearchInReviewList*>(
               &_ReqSearchInReviewList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReqSearchInReviewList& a, ReqSearchInReviewList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSearchInReviewList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSearchInReviewList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSearchInReviewList* New() const final {
    return CreateMaybeMessage<ReqSearchInReviewList>(nullptr);
  }

  ReqSearchInReviewList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSearchInReviewList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSearchInReviewList& from);
  void MergeFrom(const ReqSearchInReviewList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSearchInReviewList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqSearchInReviewList";
  }
  protected:
  explicit ReqSearchInReviewList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kUseSuccessCountFieldNumber = 3,
  };
  // optional uint32 limit = 1;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 use_success_count = 3;
  bool has_use_success_count() const;
  private:
  bool _internal_has_use_success_count() const;
  public:
  void clear_use_success_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 use_success_count() const;
  void set_use_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_use_success_count() const;
  void _internal_set_use_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ReqSearchInReviewList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 use_success_count_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespSearchInReviewList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespSearchInReviewList) */ {
 public:
  inline RespSearchInReviewList() : RespSearchInReviewList(nullptr) {}
  virtual ~RespSearchInReviewList();

  RespSearchInReviewList(const RespSearchInReviewList& from);
  RespSearchInReviewList(RespSearchInReviewList&& from) noexcept
    : RespSearchInReviewList() {
    *this = ::std::move(from);
  }

  inline RespSearchInReviewList& operator=(const RespSearchInReviewList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespSearchInReviewList& operator=(RespSearchInReviewList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespSearchInReviewList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespSearchInReviewList* internal_default_instance() {
    return reinterpret_cast<const RespSearchInReviewList*>(
               &_RespSearchInReviewList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RespSearchInReviewList& a, RespSearchInReviewList& b) {
    a.Swap(&b);
  }
  inline void Swap(RespSearchInReviewList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespSearchInReviewList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespSearchInReviewList* New() const final {
    return CreateMaybeMessage<RespSearchInReviewList>(nullptr);
  }

  RespSearchInReviewList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespSearchInReviewList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespSearchInReviewList& from);
  void MergeFrom(const RespSearchInReviewList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespSearchInReviewList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespSearchInReviewList";
  }
  protected:
  explicit RespSearchInReviewList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
  };
  // repeated .api.WordInReview word = 1;
  int word_size() const;
  private:
  int _internal_word_size() const;
  public:
  void clear_word();
  ::api::WordInReview* mutable_word(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview >*
      mutable_word();
  private:
  const ::api::WordInReview& _internal_word(int index) const;
  ::api::WordInReview* _internal_add_word();
  public:
  const ::api::WordInReview& word(int index) const;
  ::api::WordInReview* add_word();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview >&
      word() const;

  // @@protoc_insertion_point(class_scope:api.RespSearchInReviewList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview > word_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqDeleteProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqDeleteProfile) */ {
 public:
  inline ReqDeleteProfile() : ReqDeleteProfile(nullptr) {}
  virtual ~ReqDeleteProfile();

  ReqDeleteProfile(const ReqDeleteProfile& from);
  ReqDeleteProfile(ReqDeleteProfile&& from) noexcept
    : ReqDeleteProfile() {
    *this = ::std::move(from);
  }

  inline ReqDeleteProfile& operator=(const ReqDeleteProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteProfile& operator=(ReqDeleteProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqDeleteProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqDeleteProfile* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteProfile*>(
               &_ReqDeleteProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReqDeleteProfile& a, ReqDeleteProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDeleteProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDeleteProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteProfile* New() const final {
    return CreateMaybeMessage<ReqDeleteProfile>(nullptr);
  }

  ReqDeleteProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteProfile& from);
  void MergeFrom(const ReqDeleteProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqDeleteProfile";
  }
  protected:
  explicit ReqDeleteProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.ReqDeleteProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespDeleteProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespDeleteProfile) */ {
 public:
  inline RespDeleteProfile() : RespDeleteProfile(nullptr) {}
  virtual ~RespDeleteProfile();

  RespDeleteProfile(const RespDeleteProfile& from);
  RespDeleteProfile(RespDeleteProfile&& from) noexcept
    : RespDeleteProfile() {
    *this = ::std::move(from);
  }

  inline RespDeleteProfile& operator=(const RespDeleteProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespDeleteProfile& operator=(RespDeleteProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespDeleteProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespDeleteProfile* internal_default_instance() {
    return reinterpret_cast<const RespDeleteProfile*>(
               &_RespDeleteProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RespDeleteProfile& a, RespDeleteProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(RespDeleteProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespDeleteProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespDeleteProfile* New() const final {
    return CreateMaybeMessage<RespDeleteProfile>(nullptr);
  }

  RespDeleteProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespDeleteProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespDeleteProfile& from);
  void MergeFrom(const RespDeleteProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespDeleteProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespDeleteProfile";
  }
  protected:
  explicit RespDeleteProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.RespDeleteProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ReqSentences PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ReqSentences) */ {
 public:
  inline ReqSentences() : ReqSentences(nullptr) {}
  virtual ~ReqSentences();

  ReqSentences(const ReqSentences& from);
  ReqSentences(ReqSentences&& from) noexcept
    : ReqSentences() {
    *this = ::std::move(from);
  }

  inline ReqSentences& operator=(const ReqSentences& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSentences& operator=(ReqSentences&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSentences& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSentences* internal_default_instance() {
    return reinterpret_cast<const ReqSentences*>(
               &_ReqSentences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ReqSentences& a, ReqSentences& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSentences* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSentences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSentences* New() const final {
    return CreateMaybeMessage<ReqSentences>(nullptr);
  }

  ReqSentences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSentences>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSentences& from);
  void MergeFrom(const ReqSentences& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSentences* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ReqSentences";
  }
  protected:
  explicit ReqSentences(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kLimitFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // optional string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // optional uint32 limit = 2;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 offset = 3;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ReqSentences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespSentences PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespSentences) */ {
 public:
  inline RespSentences() : RespSentences(nullptr) {}
  virtual ~RespSentences();

  RespSentences(const RespSentences& from);
  RespSentences(RespSentences&& from) noexcept
    : RespSentences() {
    *this = ::std::move(from);
  }

  inline RespSentences& operator=(const RespSentences& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespSentences& operator=(RespSentences&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespSentences& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespSentences* internal_default_instance() {
    return reinterpret_cast<const RespSentences*>(
               &_RespSentences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(RespSentences& a, RespSentences& b) {
    a.Swap(&b);
  }
  inline void Swap(RespSentences* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespSentences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespSentences* New() const final {
    return CreateMaybeMessage<RespSentences>(nullptr);
  }

  RespSentences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespSentences>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespSentences& from);
  void MergeFrom(const RespSentences& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespSentences* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespSentences";
  }
  protected:
  explicit RespSentences(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:api.RespSentences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class RespDefault PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.RespDefault) */ {
 public:
  inline RespDefault() : RespDefault(nullptr) {}
  virtual ~RespDefault();

  RespDefault(const RespDefault& from);
  RespDefault(RespDefault&& from) noexcept
    : RespDefault() {
    *this = ::std::move(from);
  }

  inline RespDefault& operator=(const RespDefault& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespDefault& operator=(RespDefault&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespDefault& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespDefault* internal_default_instance() {
    return reinterpret_cast<const RespDefault*>(
               &_RespDefault_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RespDefault& a, RespDefault& b) {
    a.Swap(&b);
  }
  inline void Swap(RespDefault* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespDefault* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespDefault* New() const final {
    return CreateMaybeMessage<RespDefault>(nullptr);
  }

  RespDefault* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespDefault>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespDefault& from);
  void MergeFrom(const RespDefault& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespDefault* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.RespDefault";
  }
  protected:
  explicit RespDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional bool value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.RespDefault)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool value_;
  friend struct ::TableStruct_proto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitParams

// optional string local_dir = 1;
inline bool InitParams::_internal_has_local_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InitParams::has_local_dir() const {
  return _internal_has_local_dir();
}
inline void InitParams::clear_local_dir() {
  local_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InitParams::local_dir() const {
  // @@protoc_insertion_point(field_get:api.InitParams.local_dir)
  return _internal_local_dir();
}
inline void InitParams::set_local_dir(const std::string& value) {
  _internal_set_local_dir(value);
  // @@protoc_insertion_point(field_set:api.InitParams.local_dir)
}
inline std::string* InitParams::mutable_local_dir() {
  // @@protoc_insertion_point(field_mutable:api.InitParams.local_dir)
  return _internal_mutable_local_dir();
}
inline const std::string& InitParams::_internal_local_dir() const {
  return local_dir_.Get();
}
inline void InitParams::_internal_set_local_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  local_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitParams::set_local_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  local_dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.InitParams.local_dir)
}
inline void InitParams::set_local_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  local_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.InitParams.local_dir)
}
inline void InitParams::set_local_dir(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  local_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.InitParams.local_dir)
}
inline std::string* InitParams::_internal_mutable_local_dir() {
  _has_bits_[0] |= 0x00000001u;
  return local_dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitParams::release_local_dir() {
  // @@protoc_insertion_point(field_release:api.InitParams.local_dir)
  if (!_internal_has_local_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return local_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitParams::set_allocated_local_dir(std::string* local_dir) {
  if (local_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  local_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.InitParams.local_dir)
}

// -------------------------------------------------------------------

// ReqRecentWords

// optional string desc = 1;
inline bool ReqRecentWords::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqRecentWords::has_desc() const {
  return _internal_has_desc();
}
inline void ReqRecentWords::clear_desc() {
  desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqRecentWords::desc() const {
  // @@protoc_insertion_point(field_get:api.ReqRecentWords.desc)
  return _internal_desc();
}
inline void ReqRecentWords::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:api.ReqRecentWords.desc)
}
inline std::string* ReqRecentWords::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:api.ReqRecentWords.desc)
  return _internal_mutable_desc();
}
inline const std::string& ReqRecentWords::_internal_desc() const {
  return desc_.Get();
}
inline void ReqRecentWords::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqRecentWords::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ReqRecentWords.desc)
}
inline void ReqRecentWords::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ReqRecentWords.desc)
}
inline void ReqRecentWords::set_desc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ReqRecentWords.desc)
}
inline std::string* ReqRecentWords::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000001u;
  return desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqRecentWords::release_desc() {
  // @@protoc_insertion_point(field_release:api.ReqRecentWords.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqRecentWords::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ReqRecentWords.desc)
}

// optional string version = 2;
inline bool ReqRecentWords::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReqRecentWords::has_version() const {
  return _internal_has_version();
}
inline void ReqRecentWords::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReqRecentWords::version() const {
  // @@protoc_insertion_point(field_get:api.ReqRecentWords.version)
  return _internal_version();
}
inline void ReqRecentWords::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:api.ReqRecentWords.version)
}
inline std::string* ReqRecentWords::mutable_version() {
  // @@protoc_insertion_point(field_mutable:api.ReqRecentWords.version)
  return _internal_mutable_version();
}
inline const std::string& ReqRecentWords::_internal_version() const {
  return version_.Get();
}
inline void ReqRecentWords::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqRecentWords::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ReqRecentWords.version)
}
inline void ReqRecentWords::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ReqRecentWords.version)
}
inline void ReqRecentWords::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ReqRecentWords.version)
}
inline std::string* ReqRecentWords::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqRecentWords::release_version() {
  // @@protoc_insertion_point(field_release:api.ReqRecentWords.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqRecentWords::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ReqRecentWords.version)
}

// -------------------------------------------------------------------

// RespRecentWords

// repeated string word = 1;
inline int RespRecentWords::_internal_word_size() const {
  return word_.size();
}
inline int RespRecentWords::word_size() const {
  return _internal_word_size();
}
inline void RespRecentWords::clear_word() {
  word_.Clear();
}
inline std::string* RespRecentWords::add_word() {
  // @@protoc_insertion_point(field_add_mutable:api.RespRecentWords.word)
  return _internal_add_word();
}
inline const std::string& RespRecentWords::_internal_word(int index) const {
  return word_.Get(index);
}
inline const std::string& RespRecentWords::word(int index) const {
  // @@protoc_insertion_point(field_get:api.RespRecentWords.word)
  return _internal_word(index);
}
inline std::string* RespRecentWords::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:api.RespRecentWords.word)
  return word_.Mutable(index);
}
inline void RespRecentWords::set_word(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:api.RespRecentWords.word)
  word_.Mutable(index)->assign(value);
}
inline void RespRecentWords::set_word(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:api.RespRecentWords.word)
  word_.Mutable(index)->assign(std::move(value));
}
inline void RespRecentWords::set_word(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.RespRecentWords.word)
}
inline void RespRecentWords::set_word(int index, const char* value, size_t size) {
  word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.RespRecentWords.word)
}
inline std::string* RespRecentWords::_internal_add_word() {
  return word_.Add();
}
inline void RespRecentWords::add_word(const std::string& value) {
  word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.RespRecentWords.word)
}
inline void RespRecentWords::add_word(std::string&& value) {
  word_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.RespRecentWords.word)
}
inline void RespRecentWords::add_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.RespRecentWords.word)
}
inline void RespRecentWords::add_word(const char* value, size_t size) {
  word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.RespRecentWords.word)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RespRecentWords::word() const {
  // @@protoc_insertion_point(field_list:api.RespRecentWords.word)
  return word_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RespRecentWords::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:api.RespRecentWords.word)
  return &word_;
}

// -------------------------------------------------------------------

// ReqSearchWords

// optional string word = 1;
inline bool ReqSearchWords::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqSearchWords::has_word() const {
  return _internal_has_word();
}
inline void ReqSearchWords::clear_word() {
  word_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqSearchWords::word() const {
  // @@protoc_insertion_point(field_get:api.ReqSearchWords.word)
  return _internal_word();
}
inline void ReqSearchWords::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:api.ReqSearchWords.word)
}
inline std::string* ReqSearchWords::mutable_word() {
  // @@protoc_insertion_point(field_mutable:api.ReqSearchWords.word)
  return _internal_mutable_word();
}
inline const std::string& ReqSearchWords::_internal_word() const {
  return word_.Get();
}
inline void ReqSearchWords::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqSearchWords::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ReqSearchWords.word)
}
inline void ReqSearchWords::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ReqSearchWords.word)
}
inline void ReqSearchWords::set_word(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ReqSearchWords.word)
}
inline std::string* ReqSearchWords::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqSearchWords::release_word() {
  // @@protoc_insertion_point(field_release:api.ReqSearchWords.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqSearchWords::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ReqSearchWords.word)
}

// optional bool use_like = 2;
inline bool ReqSearchWords::_internal_has_use_like() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReqSearchWords::has_use_like() const {
  return _internal_has_use_like();
}
inline void ReqSearchWords::clear_use_like() {
  use_like_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ReqSearchWords::_internal_use_like() const {
  return use_like_;
}
inline bool ReqSearchWords::use_like() const {
  // @@protoc_insertion_point(field_get:api.ReqSearchWords.use_like)
  return _internal_use_like();
}
inline void ReqSearchWords::_internal_set_use_like(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_like_ = value;
}
inline void ReqSearchWords::set_use_like(bool value) {
  _internal_set_use_like(value);
  // @@protoc_insertion_point(field_set:api.ReqSearchWords.use_like)
}

// -------------------------------------------------------------------

// RespSearchWords

// repeated .api.Word item = 1;
inline int RespSearchWords::_internal_item_size() const {
  return item_.size();
}
inline int RespSearchWords::item_size() const {
  return _internal_item_size();
}
inline void RespSearchWords::clear_item() {
  item_.Clear();
}
inline ::api::Word* RespSearchWords::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:api.RespSearchWords.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word >*
RespSearchWords::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:api.RespSearchWords.item)
  return &item_;
}
inline const ::api::Word& RespSearchWords::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::api::Word& RespSearchWords::item(int index) const {
  // @@protoc_insertion_point(field_get:api.RespSearchWords.item)
  return _internal_item(index);
}
inline ::api::Word* RespSearchWords::_internal_add_item() {
  return item_.Add();
}
inline ::api::Word* RespSearchWords::add_item() {
  // @@protoc_insertion_point(field_add:api.RespSearchWords.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word >&
RespSearchWords::item() const {
  // @@protoc_insertion_point(field_list:api.RespSearchWords.item)
  return item_;
}

// -------------------------------------------------------------------

// ReqRandWords

// optional uint32 count = 1;
inline bool ReqRandWords::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqRandWords::has_count() const {
  return _internal_has_count();
}
inline void ReqRandWords::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqRandWords::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqRandWords::count() const {
  // @@protoc_insertion_point(field_get:api.ReqRandWords.count)
  return _internal_count();
}
inline void ReqRandWords::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void ReqRandWords::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:api.ReqRandWords.count)
}

// -------------------------------------------------------------------

// RespRandWords

// repeated .api.Word words = 1;
inline int RespRandWords::_internal_words_size() const {
  return words_.size();
}
inline int RespRandWords::words_size() const {
  return _internal_words_size();
}
inline void RespRandWords::clear_words() {
  words_.Clear();
}
inline ::api::Word* RespRandWords::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:api.RespRandWords.words)
  return words_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word >*
RespRandWords::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:api.RespRandWords.words)
  return &words_;
}
inline const ::api::Word& RespRandWords::_internal_words(int index) const {
  return words_.Get(index);
}
inline const ::api::Word& RespRandWords::words(int index) const {
  // @@protoc_insertion_point(field_get:api.RespRandWords.words)
  return _internal_words(index);
}
inline ::api::Word* RespRandWords::_internal_add_words() {
  return words_.Add();
}
inline ::api::Word* RespRandWords::add_words() {
  // @@protoc_insertion_point(field_add:api.RespRandWords.words)
  return _internal_add_words();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Word >&
RespRandWords::words() const {
  // @@protoc_insertion_point(field_list:api.RespRandWords.words)
  return words_;
}

// -------------------------------------------------------------------

// ReqWordInReview

// optional string word = 1;
inline bool ReqWordInReview::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqWordInReview::has_word() const {
  return _internal_has_word();
}
inline void ReqWordInReview::clear_word() {
  word_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqWordInReview::word() const {
  // @@protoc_insertion_point(field_get:api.ReqWordInReview.word)
  return _internal_word();
}
inline void ReqWordInReview::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:api.ReqWordInReview.word)
}
inline std::string* ReqWordInReview::mutable_word() {
  // @@protoc_insertion_point(field_mutable:api.ReqWordInReview.word)
  return _internal_mutable_word();
}
inline const std::string& ReqWordInReview::_internal_word() const {
  return word_.Get();
}
inline void ReqWordInReview::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqWordInReview::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ReqWordInReview.word)
}
inline void ReqWordInReview::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ReqWordInReview.word)
}
inline void ReqWordInReview::set_word(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ReqWordInReview.word)
}
inline std::string* ReqWordInReview::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqWordInReview::release_word() {
  // @@protoc_insertion_point(field_release:api.ReqWordInReview.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqWordInReview::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ReqWordInReview.word)
}

// -------------------------------------------------------------------

// WordInReview

// optional string word = 1;
inline bool WordInReview::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WordInReview::has_word() const {
  return _internal_has_word();
}
inline void WordInReview::clear_word() {
  word_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WordInReview::word() const {
  // @@protoc_insertion_point(field_get:api.WordInReview.word)
  return _internal_word();
}
inline void WordInReview::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:api.WordInReview.word)
}
inline std::string* WordInReview::mutable_word() {
  // @@protoc_insertion_point(field_mutable:api.WordInReview.word)
  return _internal_mutable_word();
}
inline const std::string& WordInReview::_internal_word() const {
  return word_.Get();
}
inline void WordInReview::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WordInReview::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.WordInReview.word)
}
inline void WordInReview::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.WordInReview.word)
}
inline void WordInReview::set_word(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.WordInReview.word)
}
inline std::string* WordInReview::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WordInReview::release_word() {
  // @@protoc_insertion_point(field_release:api.WordInReview.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WordInReview::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.WordInReview.word)
}

// optional uint32 success_count = 2;
inline bool WordInReview::_internal_has_success_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WordInReview::has_success_count() const {
  return _internal_has_success_count();
}
inline void WordInReview::clear_success_count() {
  success_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WordInReview::_internal_success_count() const {
  return success_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WordInReview::success_count() const {
  // @@protoc_insertion_point(field_get:api.WordInReview.success_count)
  return _internal_success_count();
}
inline void WordInReview::_internal_set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  success_count_ = value;
}
inline void WordInReview::set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_success_count(value);
  // @@protoc_insertion_point(field_set:api.WordInReview.success_count)
}

// optional uint32 fail_count = 3;
inline bool WordInReview::_internal_has_fail_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WordInReview::has_fail_count() const {
  return _internal_has_fail_count();
}
inline void WordInReview::clear_fail_count() {
  fail_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WordInReview::_internal_fail_count() const {
  return fail_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WordInReview::fail_count() const {
  // @@protoc_insertion_point(field_get:api.WordInReview.fail_count)
  return _internal_fail_count();
}
inline void WordInReview::_internal_set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fail_count_ = value;
}
inline void WordInReview::set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fail_count(value);
  // @@protoc_insertion_point(field_set:api.WordInReview.fail_count)
}

// optional uint64 last_tm_success = 4;
inline bool WordInReview::_internal_has_last_tm_success() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WordInReview::has_last_tm_success() const {
  return _internal_has_last_tm_success();
}
inline void WordInReview::clear_last_tm_success() {
  last_tm_success_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WordInReview::_internal_last_tm_success() const {
  return last_tm_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WordInReview::last_tm_success() const {
  // @@protoc_insertion_point(field_get:api.WordInReview.last_tm_success)
  return _internal_last_tm_success();
}
inline void WordInReview::_internal_set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_tm_success_ = value;
}
inline void WordInReview::set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_tm_success(value);
  // @@protoc_insertion_point(field_set:api.WordInReview.last_tm_success)
}

// optional uint64 last_tm_fail = 5;
inline bool WordInReview::_internal_has_last_tm_fail() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WordInReview::has_last_tm_fail() const {
  return _internal_has_last_tm_fail();
}
inline void WordInReview::clear_last_tm_fail() {
  last_tm_fail_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WordInReview::_internal_last_tm_fail() const {
  return last_tm_fail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WordInReview::last_tm_fail() const {
  // @@protoc_insertion_point(field_get:api.WordInReview.last_tm_fail)
  return _internal_last_tm_fail();
}
inline void WordInReview::_internal_set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_tm_fail_ = value;
}
inline void WordInReview::set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_tm_fail(value);
  // @@protoc_insertion_point(field_set:api.WordInReview.last_tm_fail)
}

// optional uint64 next_review_tm_ms = 6;
inline bool WordInReview::_internal_has_next_review_tm_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WordInReview::has_next_review_tm_ms() const {
  return _internal_has_next_review_tm_ms();
}
inline void WordInReview::clear_next_review_tm_ms() {
  next_review_tm_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WordInReview::_internal_next_review_tm_ms() const {
  return next_review_tm_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WordInReview::next_review_tm_ms() const {
  // @@protoc_insertion_point(field_get:api.WordInReview.next_review_tm_ms)
  return _internal_next_review_tm_ms();
}
inline void WordInReview::_internal_set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  next_review_tm_ms_ = value;
}
inline void WordInReview::set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_review_tm_ms(value);
  // @@protoc_insertion_point(field_set:api.WordInReview.next_review_tm_ms)
}

// -------------------------------------------------------------------

// ReqAddWordInReview

// optional string word = 1;
inline bool ReqAddWordInReview::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqAddWordInReview::has_word() const {
  return _internal_has_word();
}
inline void ReqAddWordInReview::clear_word() {
  word_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqAddWordInReview::word() const {
  // @@protoc_insertion_point(field_get:api.ReqAddWordInReview.word)
  return _internal_word();
}
inline void ReqAddWordInReview::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:api.ReqAddWordInReview.word)
}
inline std::string* ReqAddWordInReview::mutable_word() {
  // @@protoc_insertion_point(field_mutable:api.ReqAddWordInReview.word)
  return _internal_mutable_word();
}
inline const std::string& ReqAddWordInReview::_internal_word() const {
  return word_.Get();
}
inline void ReqAddWordInReview::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqAddWordInReview::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ReqAddWordInReview.word)
}
inline void ReqAddWordInReview::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ReqAddWordInReview.word)
}
inline void ReqAddWordInReview::set_word(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ReqAddWordInReview.word)
}
inline std::string* ReqAddWordInReview::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqAddWordInReview::release_word() {
  // @@protoc_insertion_point(field_release:api.ReqAddWordInReview.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqAddWordInReview::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ReqAddWordInReview.word)
}

// optional bool use_extra_fields = 2;
inline bool ReqAddWordInReview::_internal_has_use_extra_fields() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReqAddWordInReview::has_use_extra_fields() const {
  return _internal_has_use_extra_fields();
}
inline void ReqAddWordInReview::clear_use_extra_fields() {
  use_extra_fields_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ReqAddWordInReview::_internal_use_extra_fields() const {
  return use_extra_fields_;
}
inline bool ReqAddWordInReview::use_extra_fields() const {
  // @@protoc_insertion_point(field_get:api.ReqAddWordInReview.use_extra_fields)
  return _internal_use_extra_fields();
}
inline void ReqAddWordInReview::_internal_set_use_extra_fields(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_extra_fields_ = value;
}
inline void ReqAddWordInReview::set_use_extra_fields(bool value) {
  _internal_set_use_extra_fields(value);
  // @@protoc_insertion_point(field_set:api.ReqAddWordInReview.use_extra_fields)
}

// optional uint32 success_count = 3;
inline bool ReqAddWordInReview::_internal_has_success_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReqAddWordInReview::has_success_count() const {
  return _internal_has_success_count();
}
inline void ReqAddWordInReview::clear_success_count() {
  success_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqAddWordInReview::_internal_success_count() const {
  return success_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqAddWordInReview::success_count() const {
  // @@protoc_insertion_point(field_get:api.ReqAddWordInReview.success_count)
  return _internal_success_count();
}
inline void ReqAddWordInReview::_internal_set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  success_count_ = value;
}
inline void ReqAddWordInReview::set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_success_count(value);
  // @@protoc_insertion_point(field_set:api.ReqAddWordInReview.success_count)
}

// optional uint32 fail_count = 4;
inline bool ReqAddWordInReview::_internal_has_fail_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReqAddWordInReview::has_fail_count() const {
  return _internal_has_fail_count();
}
inline void ReqAddWordInReview::clear_fail_count() {
  fail_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqAddWordInReview::_internal_fail_count() const {
  return fail_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqAddWordInReview::fail_count() const {
  // @@protoc_insertion_point(field_get:api.ReqAddWordInReview.fail_count)
  return _internal_fail_count();
}
inline void ReqAddWordInReview::_internal_set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  fail_count_ = value;
}
inline void ReqAddWordInReview::set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fail_count(value);
  // @@protoc_insertion_point(field_set:api.ReqAddWordInReview.fail_count)
}

// optional uint64 last_tm_success = 5;
inline bool ReqAddWordInReview::_internal_has_last_tm_success() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReqAddWordInReview::has_last_tm_success() const {
  return _internal_has_last_tm_success();
}
inline void ReqAddWordInReview::clear_last_tm_success() {
  last_tm_success_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAddWordInReview::_internal_last_tm_success() const {
  return last_tm_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAddWordInReview::last_tm_success() const {
  // @@protoc_insertion_point(field_get:api.ReqAddWordInReview.last_tm_success)
  return _internal_last_tm_success();
}
inline void ReqAddWordInReview::_internal_set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_tm_success_ = value;
}
inline void ReqAddWordInReview::set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_tm_success(value);
  // @@protoc_insertion_point(field_set:api.ReqAddWordInReview.last_tm_success)
}

// optional uint64 last_tm_fail = 6;
inline bool ReqAddWordInReview::_internal_has_last_tm_fail() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReqAddWordInReview::has_last_tm_fail() const {
  return _internal_has_last_tm_fail();
}
inline void ReqAddWordInReview::clear_last_tm_fail() {
  last_tm_fail_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAddWordInReview::_internal_last_tm_fail() const {
  return last_tm_fail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAddWordInReview::last_tm_fail() const {
  // @@protoc_insertion_point(field_get:api.ReqAddWordInReview.last_tm_fail)
  return _internal_last_tm_fail();
}
inline void ReqAddWordInReview::_internal_set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_tm_fail_ = value;
}
inline void ReqAddWordInReview::set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_tm_fail(value);
  // @@protoc_insertion_point(field_set:api.ReqAddWordInReview.last_tm_fail)
}

// optional uint64 next_review_tm_ms = 7;
inline bool ReqAddWordInReview::_internal_has_next_review_tm_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReqAddWordInReview::has_next_review_tm_ms() const {
  return _internal_has_next_review_tm_ms();
}
inline void ReqAddWordInReview::clear_next_review_tm_ms() {
  next_review_tm_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAddWordInReview::_internal_next_review_tm_ms() const {
  return next_review_tm_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAddWordInReview::next_review_tm_ms() const {
  // @@protoc_insertion_point(field_get:api.ReqAddWordInReview.next_review_tm_ms)
  return _internal_next_review_tm_ms();
}
inline void ReqAddWordInReview::_internal_set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  next_review_tm_ms_ = value;
}
inline void ReqAddWordInReview::set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_review_tm_ms(value);
  // @@protoc_insertion_point(field_set:api.ReqAddWordInReview.next_review_tm_ms)
}

// -------------------------------------------------------------------

// RespAddWordInCurrent

// -------------------------------------------------------------------

// ReqRemoveWordFromCurrent

// optional string word = 1;
inline bool ReqRemoveWordFromCurrent::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqRemoveWordFromCurrent::has_word() const {
  return _internal_has_word();
}
inline void ReqRemoveWordFromCurrent::clear_word() {
  word_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqRemoveWordFromCurrent::word() const {
  // @@protoc_insertion_point(field_get:api.ReqRemoveWordFromCurrent.word)
  return _internal_word();
}
inline void ReqRemoveWordFromCurrent::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:api.ReqRemoveWordFromCurrent.word)
}
inline std::string* ReqRemoveWordFromCurrent::mutable_word() {
  // @@protoc_insertion_point(field_mutable:api.ReqRemoveWordFromCurrent.word)
  return _internal_mutable_word();
}
inline const std::string& ReqRemoveWordFromCurrent::_internal_word() const {
  return word_.Get();
}
inline void ReqRemoveWordFromCurrent::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqRemoveWordFromCurrent::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ReqRemoveWordFromCurrent.word)
}
inline void ReqRemoveWordFromCurrent::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ReqRemoveWordFromCurrent.word)
}
inline void ReqRemoveWordFromCurrent::set_word(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ReqRemoveWordFromCurrent.word)
}
inline std::string* ReqRemoveWordFromCurrent::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqRemoveWordFromCurrent::release_word() {
  // @@protoc_insertion_point(field_release:api.ReqRemoveWordFromCurrent.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqRemoveWordFromCurrent::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ReqRemoveWordFromCurrent.word)
}

// -------------------------------------------------------------------

// RespRemoveWordFromCurrent

// -------------------------------------------------------------------

// ReqUpdateWordInCurrent

// optional string word = 1;
inline bool ReqUpdateWordInCurrent::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqUpdateWordInCurrent::has_word() const {
  return _internal_has_word();
}
inline void ReqUpdateWordInCurrent::clear_word() {
  word_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqUpdateWordInCurrent::word() const {
  // @@protoc_insertion_point(field_get:api.ReqUpdateWordInCurrent.word)
  return _internal_word();
}
inline void ReqUpdateWordInCurrent::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:api.ReqUpdateWordInCurrent.word)
}
inline std::string* ReqUpdateWordInCurrent::mutable_word() {
  // @@protoc_insertion_point(field_mutable:api.ReqUpdateWordInCurrent.word)
  return _internal_mutable_word();
}
inline const std::string& ReqUpdateWordInCurrent::_internal_word() const {
  return word_.Get();
}
inline void ReqUpdateWordInCurrent::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqUpdateWordInCurrent::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ReqUpdateWordInCurrent.word)
}
inline void ReqUpdateWordInCurrent::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ReqUpdateWordInCurrent.word)
}
inline void ReqUpdateWordInCurrent::set_word(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ReqUpdateWordInCurrent.word)
}
inline std::string* ReqUpdateWordInCurrent::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqUpdateWordInCurrent::release_word() {
  // @@protoc_insertion_point(field_release:api.ReqUpdateWordInCurrent.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqUpdateWordInCurrent::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ReqUpdateWordInCurrent.word)
}

// optional uint32 success_count = 2;
inline bool ReqUpdateWordInCurrent::_internal_has_success_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReqUpdateWordInCurrent::has_success_count() const {
  return _internal_has_success_count();
}
inline void ReqUpdateWordInCurrent::clear_success_count() {
  success_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqUpdateWordInCurrent::_internal_success_count() const {
  return success_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqUpdateWordInCurrent::success_count() const {
  // @@protoc_insertion_point(field_get:api.ReqUpdateWordInCurrent.success_count)
  return _internal_success_count();
}
inline void ReqUpdateWordInCurrent::_internal_set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  success_count_ = value;
}
inline void ReqUpdateWordInCurrent::set_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_success_count(value);
  // @@protoc_insertion_point(field_set:api.ReqUpdateWordInCurrent.success_count)
}

// optional uint32 fail_count = 3;
inline bool ReqUpdateWordInCurrent::_internal_has_fail_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReqUpdateWordInCurrent::has_fail_count() const {
  return _internal_has_fail_count();
}
inline void ReqUpdateWordInCurrent::clear_fail_count() {
  fail_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqUpdateWordInCurrent::_internal_fail_count() const {
  return fail_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqUpdateWordInCurrent::fail_count() const {
  // @@protoc_insertion_point(field_get:api.ReqUpdateWordInCurrent.fail_count)
  return _internal_fail_count();
}
inline void ReqUpdateWordInCurrent::_internal_set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fail_count_ = value;
}
inline void ReqUpdateWordInCurrent::set_fail_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fail_count(value);
  // @@protoc_insertion_point(field_set:api.ReqUpdateWordInCurrent.fail_count)
}

// optional uint64 last_tm_success = 4;
inline bool ReqUpdateWordInCurrent::_internal_has_last_tm_success() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReqUpdateWordInCurrent::has_last_tm_success() const {
  return _internal_has_last_tm_success();
}
inline void ReqUpdateWordInCurrent::clear_last_tm_success() {
  last_tm_success_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqUpdateWordInCurrent::_internal_last_tm_success() const {
  return last_tm_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqUpdateWordInCurrent::last_tm_success() const {
  // @@protoc_insertion_point(field_get:api.ReqUpdateWordInCurrent.last_tm_success)
  return _internal_last_tm_success();
}
inline void ReqUpdateWordInCurrent::_internal_set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_tm_success_ = value;
}
inline void ReqUpdateWordInCurrent::set_last_tm_success(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_tm_success(value);
  // @@protoc_insertion_point(field_set:api.ReqUpdateWordInCurrent.last_tm_success)
}

// optional uint64 last_tm_fail = 5;
inline bool ReqUpdateWordInCurrent::_internal_has_last_tm_fail() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReqUpdateWordInCurrent::has_last_tm_fail() const {
  return _internal_has_last_tm_fail();
}
inline void ReqUpdateWordInCurrent::clear_last_tm_fail() {
  last_tm_fail_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqUpdateWordInCurrent::_internal_last_tm_fail() const {
  return last_tm_fail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqUpdateWordInCurrent::last_tm_fail() const {
  // @@protoc_insertion_point(field_get:api.ReqUpdateWordInCurrent.last_tm_fail)
  return _internal_last_tm_fail();
}
inline void ReqUpdateWordInCurrent::_internal_set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_tm_fail_ = value;
}
inline void ReqUpdateWordInCurrent::set_last_tm_fail(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_tm_fail(value);
  // @@protoc_insertion_point(field_set:api.ReqUpdateWordInCurrent.last_tm_fail)
}

// optional uint64 next_review_tm_ms = 6;
inline bool ReqUpdateWordInCurrent::_internal_has_next_review_tm_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReqUpdateWordInCurrent::has_next_review_tm_ms() const {
  return _internal_has_next_review_tm_ms();
}
inline void ReqUpdateWordInCurrent::clear_next_review_tm_ms() {
  next_review_tm_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqUpdateWordInCurrent::_internal_next_review_tm_ms() const {
  return next_review_tm_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqUpdateWordInCurrent::next_review_tm_ms() const {
  // @@protoc_insertion_point(field_get:api.ReqUpdateWordInCurrent.next_review_tm_ms)
  return _internal_next_review_tm_ms();
}
inline void ReqUpdateWordInCurrent::_internal_set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  next_review_tm_ms_ = value;
}
inline void ReqUpdateWordInCurrent::set_next_review_tm_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_review_tm_ms(value);
  // @@protoc_insertion_point(field_set:api.ReqUpdateWordInCurrent.next_review_tm_ms)
}

// -------------------------------------------------------------------

// RespUpdateWordInCurrent

// -------------------------------------------------------------------

// Word

// optional string value = 1;
inline bool Word::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Word::has_value() const {
  return _internal_has_value();
}
inline void Word::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Word::value() const {
  // @@protoc_insertion_point(field_get:api.Word.value)
  return _internal_value();
}
inline void Word::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:api.Word.value)
}
inline std::string* Word::mutable_value() {
  // @@protoc_insertion_point(field_mutable:api.Word.value)
  return _internal_mutable_value();
}
inline const std::string& Word::_internal_value() const {
  return value_.Get();
}
inline void Word::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Word::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Word.value)
}
inline void Word::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Word.value)
}
inline void Word::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Word.value)
}
inline std::string* Word::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Word::release_value() {
  // @@protoc_insertion_point(field_release:api.Word.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Word::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Word.value)
}

// optional uint64 frequency = 2;
inline bool Word::_internal_has_frequency() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Word::has_frequency() const {
  return _internal_has_frequency();
}
inline void Word::clear_frequency() {
  frequency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Word::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Word::frequency() const {
  // @@protoc_insertion_point(field_get:api.Word.frequency)
  return _internal_frequency();
}
inline void Word::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  frequency_ = value;
}
inline void Word::set_frequency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:api.Word.frequency)
}

// optional string json = 3;
inline bool Word::_internal_has_json() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Word::has_json() const {
  return _internal_has_json();
}
inline void Word::clear_json() {
  json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Word::json() const {
  // @@protoc_insertion_point(field_get:api.Word.json)
  return _internal_json();
}
inline void Word::set_json(const std::string& value) {
  _internal_set_json(value);
  // @@protoc_insertion_point(field_set:api.Word.json)
}
inline std::string* Word::mutable_json() {
  // @@protoc_insertion_point(field_mutable:api.Word.json)
  return _internal_mutable_json();
}
inline const std::string& Word::_internal_json() const {
  return json_.Get();
}
inline void Word::_internal_set_json(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Word::set_json(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Word.json)
}
inline void Word::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Word.json)
}
inline void Word::set_json(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Word.json)
}
inline std::string* Word::_internal_mutable_json() {
  _has_bits_[0] |= 0x00000002u;
  return json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Word::release_json() {
  // @@protoc_insertion_point(field_release:api.Word.json)
  if (!_internal_has_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Word::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Word.json)
}

// optional string transcript = 4;
inline bool Word::_internal_has_transcript() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Word::has_transcript() const {
  return _internal_has_transcript();
}
inline void Word::clear_transcript() {
  transcript_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Word::transcript() const {
  // @@protoc_insertion_point(field_get:api.Word.transcript)
  return _internal_transcript();
}
inline void Word::set_transcript(const std::string& value) {
  _internal_set_transcript(value);
  // @@protoc_insertion_point(field_set:api.Word.transcript)
}
inline std::string* Word::mutable_transcript() {
  // @@protoc_insertion_point(field_mutable:api.Word.transcript)
  return _internal_mutable_transcript();
}
inline const std::string& Word::_internal_transcript() const {
  return transcript_.Get();
}
inline void Word::_internal_set_transcript(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Word::set_transcript(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  transcript_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Word.transcript)
}
inline void Word::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Word.transcript)
}
inline void Word::set_transcript(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Word.transcript)
}
inline std::string* Word::_internal_mutable_transcript() {
  _has_bits_[0] |= 0x00000004u;
  return transcript_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Word::release_transcript() {
  // @@protoc_insertion_point(field_release:api.Word.transcript)
  if (!_internal_has_transcript()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return transcript_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Word::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  transcript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Word.transcript)
}

// -------------------------------------------------------------------

// ReqReviewForToday

// -------------------------------------------------------------------

// RespReviewForToday

// repeated .api.WordInReview first_n_word = 1;
inline int RespReviewForToday::_internal_first_n_word_size() const {
  return first_n_word_.size();
}
inline int RespReviewForToday::first_n_word_size() const {
  return _internal_first_n_word_size();
}
inline void RespReviewForToday::clear_first_n_word() {
  first_n_word_.Clear();
}
inline ::api::WordInReview* RespReviewForToday::mutable_first_n_word(int index) {
  // @@protoc_insertion_point(field_mutable:api.RespReviewForToday.first_n_word)
  return first_n_word_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview >*
RespReviewForToday::mutable_first_n_word() {
  // @@protoc_insertion_point(field_mutable_list:api.RespReviewForToday.first_n_word)
  return &first_n_word_;
}
inline const ::api::WordInReview& RespReviewForToday::_internal_first_n_word(int index) const {
  return first_n_word_.Get(index);
}
inline const ::api::WordInReview& RespReviewForToday::first_n_word(int index) const {
  // @@protoc_insertion_point(field_get:api.RespReviewForToday.first_n_word)
  return _internal_first_n_word(index);
}
inline ::api::WordInReview* RespReviewForToday::_internal_add_first_n_word() {
  return first_n_word_.Add();
}
inline ::api::WordInReview* RespReviewForToday::add_first_n_word() {
  // @@protoc_insertion_point(field_add:api.RespReviewForToday.first_n_word)
  return _internal_add_first_n_word();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview >&
RespReviewForToday::first_n_word() const {
  // @@protoc_insertion_point(field_list:api.RespReviewForToday.first_n_word)
  return first_n_word_;
}

// optional uint32 count_all = 2;
inline bool RespReviewForToday::_internal_has_count_all() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RespReviewForToday::has_count_all() const {
  return _internal_has_count_all();
}
inline void RespReviewForToday::clear_count_all() {
  count_all_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RespReviewForToday::_internal_count_all() const {
  return count_all_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RespReviewForToday::count_all() const {
  // @@protoc_insertion_point(field_get:api.RespReviewForToday.count_all)
  return _internal_count_all();
}
inline void RespReviewForToday::_internal_set_count_all(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_all_ = value;
}
inline void RespReviewForToday::set_count_all(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count_all(value);
  // @@protoc_insertion_point(field_set:api.RespReviewForToday.count_all)
}

// -------------------------------------------------------------------

// ReqSearchInReviewList

// optional uint32 limit = 1;
inline bool ReqSearchInReviewList::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqSearchInReviewList::has_limit() const {
  return _internal_has_limit();
}
inline void ReqSearchInReviewList::clear_limit() {
  limit_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSearchInReviewList::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSearchInReviewList::limit() const {
  // @@protoc_insertion_point(field_get:api.ReqSearchInReviewList.limit)
  return _internal_limit();
}
inline void ReqSearchInReviewList::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  limit_ = value;
}
inline void ReqSearchInReviewList::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:api.ReqSearchInReviewList.limit)
}

// optional uint32 offset = 2;
inline bool ReqSearchInReviewList::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReqSearchInReviewList::has_offset() const {
  return _internal_has_offset();
}
inline void ReqSearchInReviewList::clear_offset() {
  offset_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSearchInReviewList::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSearchInReviewList::offset() const {
  // @@protoc_insertion_point(field_get:api.ReqSearchInReviewList.offset)
  return _internal_offset();
}
inline void ReqSearchInReviewList::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void ReqSearchInReviewList::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:api.ReqSearchInReviewList.offset)
}

// optional uint32 use_success_count = 3;
inline bool ReqSearchInReviewList::_internal_has_use_success_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReqSearchInReviewList::has_use_success_count() const {
  return _internal_has_use_success_count();
}
inline void ReqSearchInReviewList::clear_use_success_count() {
  use_success_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSearchInReviewList::_internal_use_success_count() const {
  return use_success_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSearchInReviewList::use_success_count() const {
  // @@protoc_insertion_point(field_get:api.ReqSearchInReviewList.use_success_count)
  return _internal_use_success_count();
}
inline void ReqSearchInReviewList::_internal_set_use_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  use_success_count_ = value;
}
inline void ReqSearchInReviewList::set_use_success_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_use_success_count(value);
  // @@protoc_insertion_point(field_set:api.ReqSearchInReviewList.use_success_count)
}

// -------------------------------------------------------------------

// RespSearchInReviewList

// repeated .api.WordInReview word = 1;
inline int RespSearchInReviewList::_internal_word_size() const {
  return word_.size();
}
inline int RespSearchInReviewList::word_size() const {
  return _internal_word_size();
}
inline void RespSearchInReviewList::clear_word() {
  word_.Clear();
}
inline ::api::WordInReview* RespSearchInReviewList::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:api.RespSearchInReviewList.word)
  return word_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview >*
RespSearchInReviewList::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:api.RespSearchInReviewList.word)
  return &word_;
}
inline const ::api::WordInReview& RespSearchInReviewList::_internal_word(int index) const {
  return word_.Get(index);
}
inline const ::api::WordInReview& RespSearchInReviewList::word(int index) const {
  // @@protoc_insertion_point(field_get:api.RespSearchInReviewList.word)
  return _internal_word(index);
}
inline ::api::WordInReview* RespSearchInReviewList::_internal_add_word() {
  return word_.Add();
}
inline ::api::WordInReview* RespSearchInReviewList::add_word() {
  // @@protoc_insertion_point(field_add:api.RespSearchInReviewList.word)
  return _internal_add_word();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::WordInReview >&
RespSearchInReviewList::word() const {
  // @@protoc_insertion_point(field_list:api.RespSearchInReviewList.word)
  return word_;
}

// -------------------------------------------------------------------

// ReqDeleteProfile

// -------------------------------------------------------------------

// RespDeleteProfile

// -------------------------------------------------------------------

// ReqSentences

// optional string word = 1;
inline bool ReqSentences::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqSentences::has_word() const {
  return _internal_has_word();
}
inline void ReqSentences::clear_word() {
  word_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqSentences::word() const {
  // @@protoc_insertion_point(field_get:api.ReqSentences.word)
  return _internal_word();
}
inline void ReqSentences::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:api.ReqSentences.word)
}
inline std::string* ReqSentences::mutable_word() {
  // @@protoc_insertion_point(field_mutable:api.ReqSentences.word)
  return _internal_mutable_word();
}
inline const std::string& ReqSentences::_internal_word() const {
  return word_.Get();
}
inline void ReqSentences::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqSentences::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ReqSentences.word)
}
inline void ReqSentences::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ReqSentences.word)
}
inline void ReqSentences::set_word(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ReqSentences.word)
}
inline std::string* ReqSentences::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqSentences::release_word() {
  // @@protoc_insertion_point(field_release:api.ReqSentences.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqSentences::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ReqSentences.word)
}

// optional uint32 limit = 2;
inline bool ReqSentences::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReqSentences::has_limit() const {
  return _internal_has_limit();
}
inline void ReqSentences::clear_limit() {
  limit_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSentences::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSentences::limit() const {
  // @@protoc_insertion_point(field_get:api.ReqSentences.limit)
  return _internal_limit();
}
inline void ReqSentences::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  limit_ = value;
}
inline void ReqSentences::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:api.ReqSentences.limit)
}

// optional uint32 offset = 3;
inline bool ReqSentences::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReqSentences::has_offset() const {
  return _internal_has_offset();
}
inline void ReqSentences::clear_offset() {
  offset_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSentences::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqSentences::offset() const {
  // @@protoc_insertion_point(field_get:api.ReqSentences.offset)
  return _internal_offset();
}
inline void ReqSentences::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
}
inline void ReqSentences::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:api.ReqSentences.offset)
}

// -------------------------------------------------------------------

// RespSentences

// repeated string data = 1;
inline int RespSentences::_internal_data_size() const {
  return data_.size();
}
inline int RespSentences::data_size() const {
  return _internal_data_size();
}
inline void RespSentences::clear_data() {
  data_.Clear();
}
inline std::string* RespSentences::add_data() {
  // @@protoc_insertion_point(field_add_mutable:api.RespSentences.data)
  return _internal_add_data();
}
inline const std::string& RespSentences::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& RespSentences::data(int index) const {
  // @@protoc_insertion_point(field_get:api.RespSentences.data)
  return _internal_data(index);
}
inline std::string* RespSentences::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.RespSentences.data)
  return data_.Mutable(index);
}
inline void RespSentences::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:api.RespSentences.data)
  data_.Mutable(index)->assign(value);
}
inline void RespSentences::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:api.RespSentences.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void RespSentences::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.RespSentences.data)
}
inline void RespSentences::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.RespSentences.data)
}
inline std::string* RespSentences::_internal_add_data() {
  return data_.Add();
}
inline void RespSentences::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.RespSentences.data)
}
inline void RespSentences::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.RespSentences.data)
}
inline void RespSentences::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.RespSentences.data)
}
inline void RespSentences::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.RespSentences.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RespSentences::data() const {
  // @@protoc_insertion_point(field_list:api.RespSentences.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RespSentences::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.RespSentences.data)
  return &data_;
}

// -------------------------------------------------------------------

// RespDefault

// optional bool value = 1;
inline bool RespDefault::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RespDefault::has_value() const {
  return _internal_has_value();
}
inline void RespDefault::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RespDefault::_internal_value() const {
  return value_;
}
inline bool RespDefault::value() const {
  // @@protoc_insertion_point(field_get:api.RespDefault.value)
  return _internal_value();
}
inline void RespDefault::_internal_set_value(bool value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void RespDefault::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:api.RespDefault.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2eproto
